-- EBSM1 - refinement
assert EBSM1 ||| RUN({tock})  [F= let 
	id__ = 0
	
	
	const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS = <Types_Skills_PROXIMITY>
	const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH = 3
	
within
	Control_SkillsManager::SkillsManager::D__(id__,
			    const_Control_SkillsManager_SkillsManager_REQUEST_HANDLING_DELAY,
			    const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS,
			    const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH)

-- EBSM2_ExplorePriority - refinement
assert EBSM2_ExplorePriority ||| RUN({tock})  [F= let 
	id__ = 0
	
	
	const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS = <Types_Skills_PROXIMITY>
	const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH = 3
	
within
	Control_SkillsManager::SkillsManager::D__(id__,
			    const_Control_SkillsManager_SkillsManager_REQUEST_HANDLING_DELAY,
			    const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS,
			    const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH)

-- EBSM3_ExplorePriority - refinement
assert EBSM3_ExplorePriority ||| RUN({tock})  [F= let 
	id__ = 0
	
	
	const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS = <Types_Skills_PROXIMITY>
	const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH = 3
	
within
	Control_SkillsManager::SkillsManager::D__(id__,
			    const_Control_SkillsManager_SkillsManager_REQUEST_HANDLING_DELAY,
			    const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS,
			    const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH)

-- EBSM4 - refinement
assert EBSM4 ||| RUN({tock})  [F= let 
	id__ = 0
	
	
	const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS = <Types_Skills_PROXIMITY>
	const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH = 3
	
within
	Control_SkillsManager::SkillsManager::D__(id__,
			    const_Control_SkillsManager_SkillsManager_REQUEST_HANDLING_DELAY,
			    const_Control_SkillsManager_SkillsManager_ASYNCHRONOUS_SKILLS,
			    const_Control_SkillsManager_SkillsManager_MAX_SEQ_LENGTH)


include "defs/timed_definitions.csp"
include "defs/core_defs.csp"
include "defs/Control_DSkill_Move_defs.csp"
include "defs/Platform_defs.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/Executive_defs.csp"
include "defs/ObstacleAvoidance_defs.csp"
include "defs/Types_defs.csp"
include "defs/Control_defs.csp"
include "defs/Control_CSkill_Explore_defs.csp"
include "defs/Control_DSkill_Proximity_defs.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "defs/Control_SkillsManager.csp"
include "defs/set_toolkit_defs.csp"
include "instantiations.csp"
include "defs/Control_SkillsManager_defs.csp"
include "defs/relation_toolkit_defs.csp"

channel r__

handlingEvents = Union({ {| Control_SkillsManager::SkillsManager::activate.in, 
		                      Control_SkillsManager::SkillsManager::deactivate.in,
		                      Control_SkillsManager::SkillsManager::getActiveSkills.in,
		                      Control_SkillsManager::SkillsManager::initiateEventMonitor.in,
		                      Control_SkillsManager::SkillsManager::stopEventMonitor.in 
		                   |},
		                    skillParameterRequestEvents,
		                    skillValueRequestEvents
	})
	
	
	
	skillParameterRequestEvents = {| Control_SkillsManager::SkillsManager::getExploreMaxSpeedParameter.in, 
		                            Control_SkillsManager::SkillsManager::getExplorePriorityParameter.in,
		                            Control_SkillsManager::SkillsManager::getMovePriorityParameter.in,
		                            
							        Control_SkillsManager::SkillsManager::setExploreMaxSpeedParameter.in,                                                                                                   
									Control_SkillsManager::SkillsManager::setExplorePriorityParameter.in,                                                                                                                                                                                   
									Control_SkillsManager::SkillsManager::setMovePriorityParameter.in                                                                                                   
		                            
									|}	
	
	skillValueRequestEvents = {|
		Control_SkillsManager::SkillsManager::getExploreVOutValue.in
	  |}
	
	responseEvents = {| Control_SkillsManager::SkillsManager::activeSkills.out, 
		               Control_SkillsManager::SkillsManager::eventReply.out,
		               
		               Control_SkillsManager::SkillsManager::explorePriorityParameter.out,
		               Control_SkillsManager::SkillsManager::movePriorityParameter.out,
		               Control_SkillsManager::SkillsManager::exploreMaxSpeedParameter.out,
		               
		               Control_SkillsManager::SkillsManager::exploreVOutValue.out
		               
		              |}

	handlingResponseEvents = diff( responseEvents, {|Control_SkillsManager::SkillsManager::eventReply.out|} )
	
	handlingOutputEvents = union( dskillMoveParameters, cSkillExploreParameters ) 
	
	dskillMoveActuationCommands = {| Control_SkillsManager::SkillsManager::moveVIn.out |}
	--dskillMoveSensorData = {}
	dskillMoveParameters = {| Control_SkillsManager::SkillsManager::movePriorityParam.out |}
	
	
	--cskillExploreInputs = {}
	cskillExploreOutputs = {| Control_SkillsManager::SkillsManager::exploreVOut.in  |}
	cSkillExploreParameters = {| Control_SkillsManager::SkillsManager::explorePriorityParam.out, 
		                         Control_SkillsManager::SkillsManager::exploreMaxSpeedParam.out |}
	
	skillControlEvents = Union( { skillActivateEvents, skillDeactivateEvents, skillExecuteEvents, skillCompleteEvents 	} )

	skillActivateEvents = {| Control_SkillsManager::SkillsManager::activateExplore.out, Control_SkillsManager::SkillsManager::activateMove.out |}
	skillDeactivateEvents = {| Control_SkillsManager::SkillsManager::deactivateExplore.out, Control_SkillsManager::SkillsManager::deactivateMove.out |}
	skillExecuteEvents = {| Control_SkillsManager::SkillsManager::executeExplore.out, Control_SkillsManager::SkillsManager::executeMove.out |}
	skillCompleteEvents = {| Control_SkillsManager::SkillsManager::completeExplore.in, Control_SkillsManager::SkillsManager::completeMove.in |}
	

			
	allSkillsManagerEvents = Union({ handlingEvents, responseEvents, dskillMoveParameters, dskillMoveActuationCommands, cSkillExploreParameters, cskillExploreOutputs, skillControlEvents })


EBSM1 = let	
		PRE = Control_SkillsManager::SkillsManager::getActiveSkills.in -> CON
			  |~|
			( |~| ev: diff( allSkillsManagerEvents, {|Control_SkillsManager::SkillsManager::getActiveSkills.in|} ) @ ev -> PRE )
			  
		CON = |~| ev: {|Control_SkillsManager::SkillsManager::activeSkills.out|} @ ev -> POS
		
		POS = CHAOS(allSkillsManagerEvents)
	within PRE

EBSM2_ExplorePriority = let
		PRE = Control_SkillsManager::SkillsManager::getExplorePriorityParameter.in -> CON
			  |~|
			( |~| ev: diff( allSkillsManagerEvents, {|Control_SkillsManager::SkillsManager::getExplorePriorityParameter.in|} ) @ ev -> PRE )
		
		CON = |~| ev: {|Control_SkillsManager::SkillsManager::explorePriorityParameter.out|} @ ev -> POS
		POS = CHAOS(allSkillsManagerEvents)
	within PRE

EBSM3_ExplorePriority = let
    PRE =  Control_SkillsManager::SkillsManager::setExplorePriorityParameter.in?v -> CON(v)
           |~|
         ( |~| ev: diff( allSkillsManagerEvents, {|Control_SkillsManager::SkillsManager::setExplorePriorityParameter.in|} ) @ ev -> PRE )
	 
    CON(v) = Control_SkillsManager::SkillsManager::explorePriorityParam.out!v -> POS
	
    POS = CHAOS(allSkillsManagerEvents)
	 	 
 within PRE

EBSM4 = let
    PRE =  [] ev : handlingEvents @ ( ev -> CON )
           |~|
         ( |~| ev: diff( allSkillsManagerEvents, 
                         union(handlingEvents, handlingResponseEvents) 
                        ) @ ( ev -> PRE ) )
	 
    CON = [] ev: handlingEvents @ (ev -> CON)
          |~|
        ( |~| ev: handlingResponseEvents @ ev -> CON )
          []
        ( |~| ev: diff( allSkillsManagerEvents, 
                        union(handlingEvents, handlingResponseEvents) 
                       ) @ ev -> PRE )
                       	 	 
 within PRE


