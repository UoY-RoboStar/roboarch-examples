system ObstacleAvoidance

datatype Velocities {
    linear:real
    angular:real
}

interface Motors {
     event move: Velocities
}

interface Sense {
    event proximity: int
}

robotic platform PuckRobot {
    uses Motors
    uses Sense
}


layer Executive {

    inputs= eventReply:Events, activeSkills:Set(Skills), 
	    ProximitygapValue:int, exploreVOutValue:Velocities, 
	    explorePriorityParameter:nat, proximityPriorityParameter:nat, 
	    exploreMaxSpeedParameter:real, exploreSafetyDistanceParameter:int, 
	    movePriorityParameter:nat;

    outputs= activate:Skills, deactivate:Skills, getActiveSkills, 
	     initiateEventMonitor:Events, stopEventMonitor:Events, 
	     getProximityGapValue, getExploreVOutValue, 
	     getExplorePriorityParameter, setExplorePriorityParameter:nat, 
	     getProximityPriorityParameter, setProximityPriorityParameter:nat, 
	     getExploreMaxSpeedParameter, setExploreMaxSpeedParameter:real, 
	     getExploreSafetyDistanceParameter, setExploreSafetyDistanceParameter:int, 
	     getMovePriorityParameter, setMovePriorityParameter:nat; 
} ;


layer Control: ControlLayer {

    uses Motors
    uses Sense

    inputs= activate:Skills, deactivate:Skills, getActiveSkills, 
	    initiateEventMonitor:Events, stopEventMonitor:Events, 
	    getProximityGapValue, getExploreVOutValue, 
	    getExplorePriorityParameter, setExplorePriorityParameter:nat, 
	    getProximityPriorityParameter, setProximityPriorityParameter:nat, 
	    getExploreMaxSpeedParameter, setExploreMaxSpeedParameter:real, 
	    getExploreSafetyDistanceParameter, setExploreSafetyDistanceParameter:int, 
	    getMovePriorityParameter, setMovePriorityParameter:nat; 

    outputs= eventReply:Events, activeSkills:Set(Skills), 
	     ProximitygapValue:int, exploreVOutValue:Velocities, 
	     explorePriorityParameter:nat, proximityPriorityParameter:nat, 
	     exploreMaxSpeedParameter:real, exploreSafetyDistanceParameter:int, 
	     movePriorityParameter:nat;

pattern= ReactiveSkills;

skills= 
	dskill Move {
	    inputs= vIn:Velocities;
	},

	dskill Proximity {
	    outputs= gap:int;
	},

	cskill Explore {
	    parameters=  safetyDistance: int, maxSpeed: real;
	    inputs= obstacleDistance: int;
	    outputs= vOut:Velocities;
	} ;

connections= 
	Proximity on gap to Explore on obstacleDistance,
	Explore on vOut to Move on vIn;

monitors= ( SafetyDistanceReached |  
		Proximity::gap < Explore::safetyDistance );

} ;


connections=
	Executive on activate to Control on activate, 
	Executive on deactivate to Control on deactivate,
	Executive on getActiveSkills to Control on getActiveSkills,
	Executive on initiateEventMonitor to Control on initiateEventMonitor,
	Executive on stopEventMonitor to Control on stopEventMonitor,
	Executive on getProximityGapValue to Control on getProximityGapValue,
	Executive on getExploreVOutValue to Control on getExploreVOutValue,
	Executive on getExplorePriorityParameter to Control on getExplorePriorityParameter,
	Executive on setExplorePriorityParameter to Control on setExplorePriorityParameter,
	Executive on getProximityPriorityParameter to Control on getProximityPriorityParameter,
	Executive on setProximityPriorityParameter to Control on setProximityPriorityParameter,
	Executive on getExploreMaxSpeedParameter to Control on getExploreMaxSpeedParameter,
	Executive on setExploreMaxSpeedParameter to Control on setExploreMaxSpeedParameter,
	Executive on getExploreSafetyDistanceParameter to Control on getExploreSafetyDistanceParameter,
	Executive on setExploreSafetyDistanceParameter to Control on setExploreSafetyDistanceParameter,
	Executive on getMovePriorityParameter to Control on getMovePriorityParameter,
	Executive on setMovePriorityParameter to Control on setMovePriorityParameter,

	Control on eventReply to Executive on eventReply,
	Control on activeSkills to Executive on activeSkills,
	Control on ProximitygapValue to Executive on ProximitygapValue,
	Control on exploreVOutValue to Executive on exploreVOutValue,
	Control on explorePriorityParameter to Executive on explorePriorityParameter,
	Control on proximityPriorityParameter to Executive on proximityPriorityParameter,
	Control on exploreMaxSpeedParameter to Executive on exploreMaxSpeedParameter,
	Control on exploreSafetyDistanceParameter to Executive on exploreSafetyDistanceParameter,
	Control on movePriorityParameter to Executive on movePriorityParameter,
	
	Control on move to PuckRobot on move,
	PuckRobot on proximity to Control on proximity;



